using System;
using UnityEvents;

namespace UnityEventsInternal
{
	public struct QueuedEvent<T_Event> where T_Event : unmanaged
	{
		public EventEntity entity;
		public T_Event ev;

		public QueuedEvent(EventEntity entity, T_Event ev)
		{
			this.entity = entity;
			this.ev = ev;
		}
	}

	public struct UnityEvent<T_Event> where T_Event : unmanaged
	{
		public readonly T_Event ev;
		public readonly int subscriberIndex;

		public UnityEvent(T_Event ev, int subscriberIndex)
		{
			this.ev = ev;
			this.subscriberIndex = subscriberIndex;
		}
	}

	public struct EntityCallbackId<T_Event> : IEquatable<EntityCallbackId<T_Event>>
	{
		public EventEntity entity;
		public Action<T_Event> callback;

		// Generated by Jetbrains
		private const int HASHCODE_MULTIPLIER = 397;

		public EntityCallbackId(EventEntity entity, Action<T_Event> callback)
		{
			this.entity = entity;
			this.callback = callback;
		}

		public bool Equals(EntityCallbackId<T_Event> other)
		{
			return entity.Equals(other.entity) && Equals(callback, other.callback);
		}

		public override bool Equals(object obj)
		{
			if (ReferenceEquals(null, obj)) return false;
			return obj is EntityCallbackId<T_Event> other && Equals(other);
		}

		public override int GetHashCode()
		{
			unchecked
			{
				return (entity.GetHashCode() * HASHCODE_MULTIPLIER) ^ (callback != null ? callback.GetHashCode() : 0);
			}
		}
	}}
